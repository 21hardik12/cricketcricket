// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Event {
  id                    String       @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String
  categoryId            String @db.ObjectId
  price                 Int
  date                  DateTime
  images                EventImage[]
  stadiumId             String @db.ObjectId
  isAvailableForBooking Boolean      @default(false)
  bookings              Booking[]
  stadium               Stadium      @relation(fields: [stadiumId], references: [id], onDelete: Cascade)
  category              Category     @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model Category {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  events Event[]
}

model EventImage {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  url     String @db.String
  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Stadium {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  location String
  images   StadiumImage[]
  events   Event[]
  tickets  Ticket[]
}

model Ticket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Int
  stadiumId String @db.ObjectId
  stadium   Stadium  @relation(fields: [stadiumId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: NoAction)
  bookingId String? @db.ObjectId
}

model StadiumImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String @db.String
  stadiumId String @db.ObjectId
  stadium   Stadium @relation(fields: [stadiumId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  phone     String
  address   String 
  role      String
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  pricePaid Int
  userId    String @db.ObjectId
  eventId   String @db.ObjectId
  tickets   Ticket[]
  status    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
